#!/bin/bash

# Pre-commit hook for security checks

echo "Running pre-commit security checks..."

# Run security checks on staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMRTUXB | grep -E '\.(js|jsx|ts|tsx)$')

if [[ "$STAGED_FILES" = "" ]]; then
  echo "No JavaScript/TypeScript files staged for commit."
  exit 0
fi

# Run ESLint with security rules on staged files
echo "Running ESLint security checks on staged files..."
for FILE in $STAGED_FILES; do
  npx eslint --quiet --plugin security "$FILE"
  if [[ $? -ne 0 ]]; then
    echo "ESLint security check failed for $FILE"
    echo "Please fix the security issues before committing."
    exit 1
  fi
done

# Check for hardcoded secrets in staged files
echo "Checking for hardcoded secrets in staged files..."
for FILE in $STAGED_FILES; do
  # Check for potential hardcoded secrets
  SECRETS=$(grep -E "(API_KEY|SECRET|PASSWORD|TOKEN|JWT).*=.*['\"][A-Za-z0-9+/=]{8,}['\"]" "$FILE" || true)
  if [[ ! -z "$SECRETS" ]]; then
    echo "Potential hardcoded secrets found in $FILE:"
    echo "$SECRETS"
    echo "Please remove hardcoded secrets before committing."
    exit 1
  fi
done

# Check for common security vulnerabilities
echo "Checking for common security vulnerabilities..."
for FILE in $STAGED_FILES; do
  # Check for eval usage
  EVAL_USAGE=$(grep -E "eval\s*\(" "$FILE" || true)
  if [[ ! -z "$EVAL_USAGE" ]]; then
    echo "Potential eval() usage found in $FILE:"
    echo "$EVAL_USAGE"
    echo "eval() is unsafe and should be avoided. Please refactor before committing."
    exit 1
  fi
  
  # Check for unsafe regular expressions
  UNSAFE_REGEX=$(grep -E "new RegExp\(.*(\*|\+)" "$FILE" || true)
  if [[ ! -z "$UNSAFE_REGEX" ]]; then
    echo "Potentially unsafe regular expression found in $FILE:"
    echo "$UNSAFE_REGEX"
    echo "Unbounded quantifiers (* or +) in regex can lead to ReDoS vulnerabilities."
    exit 1
  fi
  
  # Check for command injection
  CMD_INJECTION=$(grep -E "(exec|spawn|execSync)\s*\(.*\$\{" "$FILE" || true)
  if [[ ! -z "$CMD_INJECTION" ]]; then
    echo "Potential command injection found in $FILE:"
    echo "$CMD_INJECTION"
    echo "Interpolating variables in command execution is unsafe."
    exit 1
  fi
  
  # Check for potential NoSQL injection
  NOSQL_INJECTION=$(grep -E "\$where|\$ne:.*\$|findOne\s*\(\s*\{[^:]*:.*(req|params|body|query)" "$FILE" || true)
  if [[ ! -z "$NOSQL_INJECTION" ]]; then
    echo "Potential NoSQL injection found in $FILE:"
    echo "$NOSQL_INJECTION"
    echo "Direct use of user input in database queries can lead to injection vulnerabilities."
    exit 1
  fi
done

echo "All security checks passed!"
exit 0